worker_processes  5;  ## Default: 1
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

stream {
#  upstream loraserver_mqtt {
#    server broker-headless.default:1883;
#    zone tcp_mem 128k;
#  }
#  server {
#    listen      1883;
#    proxy_pass loraserver_mqtt;
#    proxy_connect_timeout 60s;
#  }

  upstream thingsboard_mqtt {
    server tb-mqtt-transport.thingsboard:1883;
    zone tcp_mem 128k;
  }
  server {
    listen      1883;
    proxy_pass thingsboard_mqtt;
    proxy_connect_timeout 60s;
  }

#  upstream redis {
#    server redis-update-headless:6379;
#    zone tcp_mem 128k;
#  }
#  server {
#    listen      6379;
#    proxy_pass redis;
#    proxy_connect_timeout 60s;
#  }
}

http {

 #server {
 #   listen 443;
 #   server_name ssl.praxis.id;
 #   ssl on;
 #   ssl_certificate /etc/nginx/certs/certificate.pem;
 #   ssl_certificate_key /etc/nginx/certs/key.pem;
 #   ssl_protocols  SSLv2 SSLv3 TLSv1;
 #   ssl_ciphers  HIGH:!aNULL:!MD5;
 #   proxy_redirect off;

 #   location / {
 #     proxy_pass        http://webapp-headless.default:6075;
 #     proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
 #     proxy_set_header  X-Real-IP $remote_addr;
 #     proxy_set_header  Host $host;
 #   }
 #}

 #server {
 #   listen      1010 default_server;
 #   server_name lora_gateway;
 #   ssl on;
 #   ssl_certificate /etc/nginx/certs/certificate.pem;
 #   ssl_certificate_key /etc/nginx/certs/key.pem;
 #   ssl_protocols  SSLv2 SSLv3 TLSv1;
 #   ssl_ciphers  HIGH:!aNULL:!MD5;
 #   proxy_redirect off;

 #   location / {

 #      if ($request_method = POST) {
 #        add_header Access-Control-Allow-Origin "*";
 #        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept,grpc-metadata-authorization";
         #add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
 #      }

 #      if ($request_method = GET) {
 #        add_header Access-Control-Allow-Origin "*";
 #        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept,grpc-metadata-authorization";
 #        #add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
 #      }

 #      if ($request_method = OPTIONS ) {
 #        add_header Access-Control-Allow-Origin "*";
 #        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept,grpc-metadata-authorization";
 #        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
 #        return 200;
 #      }
       
 #      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 #      proxy_set_header X-Real-IP $remote_addr;
 #      proxy_set_header Host $host;
 #      proxy_set_header Upgrade $http_upgrade;
 #      proxy_set_header Connection "Upgrade";
 #      proxy_pass https://appserver-update-headless.default:8888;
 #   }
 # }

  server {
    listen 80;
    listen [::]:80;
    server_name thingsboard.praxis.id; 
    return 301 https://thingsboard.praxis.id$request_uri;
  }

  server {
    listen 443;
    server_name tb.praxis.id;
    ssl on;
    ssl_certificate /etc/nginx/certs/certificate.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;
    ssl_protocols  SSLv2 SSLv3 TLSv1;
    ssl_ciphers  HIGH:!aNULL:!MD5;
    proxy_redirect off;
    
    location ~ /api/v1/.* {

       if ($request_method = OPTIONS ) {
         add_header Access-Control-Allow-Origin "*";
         add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, X-Authorization";
         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
         return 200;
       }

       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header Host $host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_pass http://tb-http-transport.thingsboard:8080;
    }

    location ~ /static/rulenode/.* {

       if ($request_method = OPTIONS ) {
         add_header Access-Control-Allow-Origin "*";
         add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, X-Authorization";
         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
         return 200;
       }

       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header Host $host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_pass http://tb-node.thingsboard:8080;
    }

    location ~ /.* {

       if ($request_method = OPTIONS ) {
         add_header Access-Control-Allow-Origin "*";
         add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, X-Authorization";
         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
         return 200;
       }

       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header Host $host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_pass http://tb-node.thingsboard:8080;
    }

    location ~ ^/(static/|index.html).* {

       if ($request_method = OPTIONS ) {
         add_header Access-Control-Allow-Origin "*";
         add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, X-Authorization";
         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
         return 200;
       }

       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header Host $host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_pass http://tb-web-ui.thingsboard:8080;
    }

    location / {

       if ($request_method = OPTIONS ) {
         add_header Access-Control-Allow-Origin "*";
         add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, X-Authorization";
         add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, HEAD";
         return 200;
       }

       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header Host $host;
       proxy_http_version 1.1;
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "Upgrade";
       proxy_pass http://tb-web-ui.thingsboard:8080;
    }
  }

  #server {
  #  listen 1880;
  #  server_name nodered;
  #  location / {
  #    proxy_pass        http://nodered-headless.default:1880;
  #    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
  #    proxy_set_header  X-Real-IP $remote_addr;
  #    proxy_set_header  Host $host;
  #    proxy_http_version 1.1;
  #    proxy_set_header Upgrade $http_upgrade;
  #    proxy_set_header Connection "upgrade";
  #  }
 #}
}
